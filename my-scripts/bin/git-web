#! /usr/bin/env bash

SCRIPTNAME=$(basename $0)

git rev-parse --git-dir > /dev/null 2>&1
if [[ $? != 0 ]]; then
    echo "${SCRIPTNAME}: couldn't find a git repo"
    exit 1
fi

REMOTE_ORIGIN_URL=$(git config --get remote.origin.url)
REPO_PATH=$(git rev-parse --show-toplevel)

if [[ $REMOTE_ORIGIN_URL =~ "@gitlab" ]]; then
    PLATFORM="gitlab"
elif [[ $REMOTE_ORIGIN_URL =~ "@github" ]]; then
    PLATFORM="github"
else
    echo "${SCRIPTNAME}: couldn't parse platform from remote origin ${REMOTE_ORIGIN_URL}"
    exit 1
fi

if [[ $REMOTE_ORIGIN_URL =~ http* ]]; then
    HTTP_SED_FILTER="s/^\(.*\)\.git$/\1/p"
    
    PROJECT_URL=$(echo "${REMOTE_ORIGIN_URL}" | sed -n "${HTTP_SED_FILTER}")
else
    # https://stackoverflow.com/a/36798723/1107844
    SSH_SED_FILTER="s/^.*:\(.*\)\.git$/\1/p"
    
    URL_FRAGMENT=$(echo "${REMOTE_ORIGIN_URL}" | sed -n "${SSH_SED_FILTER}")

    if [[ $PLATFORM = "gitlab" ]]; then
        URL_PREFIX="https://gitlab.com"
    elif [[ $PLATFORM = "github" ]]; then
        URL_PREFIX="https://github.com"
    else
        # should be impossible ¯\_(ツ)_/¯
        exit 1
    fi

    PROJECT_URL="${URL_PREFIX}/${URL_FRAGMENT}"
fi


_browse() {
    # if no parameter provided view the project page
    if [[ -z "${1}" ]]; then
        xdg-open $PROJECT_URL
        exit
    fi

    BRANCH=$(git branch --show-current)

    FULL_PATH=$(realpath "${PWD}/${1}")

    # https://stackoverflow.com/questions/16623835/remove-a-fixed-prefix-suffix-from-a-string-in-bash
    RELATIVE_PATH=${FULL_PATH#"$REPO_PATH"}

    if [[ $PLATFORM = "gitlab" ]]; then
        xdg-open "${PROJECT_URL}/-/blob/${BRANCH}${RELATIVE_PATH}"
    elif [[ $PLATFORM = "github" ]]; then
        xdg-open "${PROJECT_URL}/blob/${BRANCH}${RELATIVE_PATH}"
    fi
}

_pipe() {
    if [[ $PLATFORM = "gitlab" ]]; then
        xdg-open "${PROJECT_URL}/-/pipelines/latest"
    elif [[ $PLATFORM = "github" ]]; then
        echo "'pipe' option not implemented for GitHub"
        exit 1
    fi
}

_pipes() {
    if [[ $PLATFORM = "gitlab" ]]; then
        xdg-open "${PROJECT_URL}/-/pipelines"
    elif [[ $PLATFORM = "github" ]]; then
        echo "'pipes' option not implemented for GitHub"
        exit 1
    fi
}

_branches() {
    if [[ $PLATFORM = "gitlab" ]]; then
        xdg-open "${PROJECT_URL}/-/branches"
    elif [[ $PLATFORM = "github" ]]; then
        xdg-open "${PROJECT_URL}/branches"
    fi
}

_commits() {
    if [[ $PLATFORM = "gitlab" ]]; then
        xdg-open "${PROJECT_URL}/-/commits"
    elif [[ $PLATFORM = "github" ]]; then
        xdg-open "${PROJECT_URL}/commits"
    fi
}

_mrs() {
    if [[ $PLATFORM = "gitlab" ]]; then
        xdg-open "${PROJECT_URL}/-/merge_requests"
    elif [[ $PLATFORM = "github" ]]; then
        xdg-open "${PROJECT_URL}/pulls"
    fi
}

_root() {
    # you can't cd from a bash script unless you source the file
    # so to run this one you need to source the script, e.g. `. git-web root`
    cd "${REPO_PATH}"
}

_url() {
    echo "${PROJECT_URL}"
}

if [[ $1 =~ ^(browse|pipe|pipes|branches|commits|mrs|root|url)$ ]]; then
    COMMAND=_$1
    shift
    $COMMAND "$@"
else
    echo "Usage: ${SCRIPTNAME} [browse|pipe|pipes|branches|commits|mrs|root|url]"
fi
